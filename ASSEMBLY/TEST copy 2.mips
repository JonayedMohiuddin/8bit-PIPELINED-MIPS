# 0($io) => X ENABLE + DATA
# 1($io) => Y ENABLE + DATA
# 2($io) => UPDATE FLAG
# 3($io) => FLUSH FLAG
# 4($io) => KEYBOARD INPUT
# 14($io) => Debug Output 
# 15($io) => RAND INPUT

# x is 5 bit and y is 4 bit

# s0 = direction of snake head
# 7 = UP, 4 = RIGHT, 3 = DOWN, 1 = LEFT
# s1 = score
# s2 = x of food
# s3 = y of food

# t3 = head 
# t4 = tail

# MEMORY MAP:
# 160 - 175 : IO PORTS
# 192 - 255 : to make wrapping just or with 11000000 = -64 or 192

# keyboard input keep lsb 3 bits
# 111 = w/W = UP = 7
# 100 = d/D = RIGHT = 4
# 011 = s/S = DOWN = 3
# 001 = a/A = LEFT = 1

main:
    # initialise values
    j init
    after_init:

    # send food position to display
    sw $foodX, 0($io)
    sw $foodY, 1($io)
    sw $zero, 2($io)

    # draw snake
    addi $t0, $tail, 0 # loop index
    j draw_snake_loop
    after_draw_snake:

    # flush display
    sw $zero, 3($io)

    # # get keyboard input
    # lw $t2, 4($io)
    # andi $t2, $t2, 7 # keep lsb 3 bits, 111 UP, 100 RIGHT, 011 DOWN, 001 LEFT
 
    # # update snake direction
    # # update snakes head
    # lw $t0, 0($head) # x of head
    # lw $t1, 1($head) # y of head
    # addi $head, $head, 2 # move head to next position
    # ori $head, $head, 192 # !! wrap around

    # # set key bind register
    # addi $v0, $zero, 7
    # addi $v1, $zero, 4
    # addi $v2, $zero, 3
    # addi $v3, $zero, 1

    # # update head position
    # beq $t2, $v0, up
    # beq $t2, $v1, right
    # beq $t2, $v2, down
    # beq $t2, $v3, left
    # beq $dir, $v0, up
    # beq $dir, $v1, right
    # beq $dir, $v2, down
    # beq $dir, $v3, left
    # after_head_update:

    # # check if snake head is out of bounds

    # # save head position
    # sw $t0, 0($head)
    # sw $t1, 1($head)

    # j main

up:
    addi $t1, $t1, -1
    addi $dir, $zero, 7
    j after_head_update

right:
    addi $t0, $t0, 1
    addi $dir, $zero, 4
    j after_head_update

down:
    addi $t1, $t1, 1
    addi $dir, $zero, 3
    j after_head_update

left:
    addi $t0, $t0, -1
    addi $dir, $zero, 1
    j after_head_update

init:
    # get random food position
    lw $foodX, 15($io)
    lw $foodY, 15($io)
    andi $foodX, $foodX, 31
    andi $foodY, $foodY, 15

    addi $dir, $zero, 4 # initial direction right
    
    addi $score, $zero, 0 # initial score 0

    addi $tail, $zero, 192
    addi $head, $tail, 6 # initial snake size 8
    # each body part is 2 bytes

    # initial snake body
    addi $t0, $zero, 7 # x
    addi $t1, $zero, 7 # y
    sw $t0, 0($tail)
    sw $t1, 1($tail)
    addi $t0, $zero, 8
    addi $t1, $zero, 7
    sw $t0, 2($tail)
    sw $t1, 3($tail)
    addi $t0, $zero, 9
    addi $t1, $zero, 7
    sw $t0, 4($tail)
    sw $t1, 5($tail)
    addi $t0, $zero, 10
    addi $t1, $zero, 7
    sw $t0, 6($tail)
    sw $t1, 7($tail)

    j after_init

draw_snake_loop:
    lw $t1, 0($t0) # x of snake body
    lw $t2, 1($t0) # y of snake body
    sw $t1, 0($io) # send x to display
    sw $t2, 1($io) # send y to display
    sw $zero, 2($io) # update display
    beq $t0, $head, after_draw_snake
    addi $t0, $t0, 2 # next body
    
    sw $t0, 14($io) # debug output
    ori $t0, $t0, 192 # !! wrap around
    sw $t0, 14($io) # debug output

    j draw_snake_loop

exit: