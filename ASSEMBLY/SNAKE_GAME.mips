# CLASSICAL SNAKE GAME
# MADE BY : JONAYED MOHIUDDIN 
# EMAIL   : jonayedmohiuddin@gmail.com
# Intended to run by the 8-bit mips here : https://github.com/JonayedMohiuddin/8bit_MIPS

# WIN  : Score more than 25
# LOSE : Bite yourself
# CONTROLS : w/W = UP, d/D = RIGHT, s/S = DOWN, a/A = LEFT
# DISPLAY : 16 x 32 LED matrix, 3 x 7 digit display and TTY text screen 
# !! DISPLAY Caution: x is 5 bit and y is 4 bit 

# IO PORTS:
# 0($io) => X ENABLE + DATA
# 1($io) => Y ENABLE + DATA
# 2($io) => UPDATE FLAG
# 3($io) => FLUSH FLAG
# 4($io) => KEYBOARD INPUT
# 5($io) => TEXT OUTPUT (TTY)
# ...    => UNUSED
# 13($io) => SIGNED DECIMAL OUTPUT DISPLAY (7 SEGMENT DISPLAY)
# 14($io) => DEBUG OUTPUT 
# 15($io) => RAND INPUT

# Control Mapping:
# 011 = w/W = UP = 3
# 100 = d/D = RIGHT = 4
# 111 = s/S = DOWN = 7
# 001 = a/A = LEFT = 1

# MEMORY MAPPING:
# 000 - 127 : SNAKE BODY [ CIRCULAR QUEUE X, Y ]
# 128 - 219 : DATA + STACK
# 240 - 255 : IO PORTS

# To wrap snake body around in memory just and with 01111111 (127)
# Snake body is a circular queue [start = tail, end = head] 

# REGISTERS:
# $zero, $sp, $io, $t0, $t1, $t2, $t3, $t4, $v0, $v1, $v2, $v3, $s0, $s1, $s2, $s3
# Renamed : $t3 -> head, $t4 -> tail, $s0 -> $dir, $s1 -> $score, $s2 -> $foodX, $s3 -> $foodY

# NON STANDARD MIPS INSTRUCTIONS:
# RENAMING REGISTERS FOR EASE OF USE
# USE @ TO RENAME REGISTERS [@ old_name new_name]
@ t3 head       # position(index) of head on memory
@ t4 tail       # position(index) of tail on memory
@ s0 dir        # direction of snake [3 = UP, 4 = RIGHT, 7 = DOWN, 1 = LEFT]
@ s1 score 
@ s2 foodX
@ s3 foodY


main:
    j introduction_message
    after_introduction_message:
    # initialise values
    j init
    after_init:
    j game_loop


init:
    # Get random food position from RNG
    lw $foodX, 15($io)
    lw $foodY, 15($io)
    andi $foodX, $foodX, 31 # display x is 5 bit
    andi $foodY, $foodY, 15 # display y is 4 bit

    addi $dir, $zero, 4 # initial direction = right
    
    addi $score, $zero, 0 # initial score = 0
    sw $score, 13($io)    # send score to 7 segment display

    addi $tail, $zero, 0   # tail start from meomory location 0
    addi $head, $tail, 6   # initial snake size is 3 (but x and y are 2 bytes)
    # each body part is 2 bytes (x, y kept in 2 consecutive memory location)

    # initial snake body
    addi $t0, $zero, 7 # x0 = 7
    addi $t1, $zero, 7 # y0 = 7
    sw $t0, 0($tail)
    sw $t1, 1($tail)
    addi $t0, $zero, 8 # x1 = 8
    addi $t1, $zero, 7 # y1 = 7
    sw $t0, 2($tail)
    sw $t1, 3($tail)
    addi $t0, $zero, 9 # x2 = 9
    addi $t1, $zero, 7 # y2 = 7
    sw $t0, 4($tail)
    sw $t1, 5($tail)
    addi $t0, $zero, 10 # x3 = 10 = head_x
    addi $t1, $zero, 7  # y3 = 7 = head_y
    sw $t0, 6($tail)
    sw $t1, 7($tail)

    # set key bind register
    addi $v0, $zero, 3 # UP
    addi $v1, $zero, 4 # RIGHT
    addi $v2, $zero, 7 # DOWN
    addi $v3, $zero, 1 # LEFT

    j after_init


game_loop:
    # send food position to display
    sw $foodX, 0($io)
    sw $foodY, 1($io)
    sw $zero, 2($io)

    # draw snake
    addi $t0, $tail, 0 # loop index
    j draw_snake_loop
    after_draw_snake:

    # flush display
    sw $zero, 3($io)

    # get keyboard input
    addi $t2, $zero, 0
    lw $t2, 4($io)
    andi $t2, $t2, 7 # keep lsb 3 bits, 111 UP, 100 RIGHT, 011 DOWN, 001 LEFT

    # update snake direction
    # update snakes head
    lw $t0, 0($head) # x of head
    lw $t1, 1($head) # y of head

    # key bind registers
    addi $v0, $zero, 3 # UP
    addi $v1, $zero, 4 # RIGHT
    # Not used else where so no need to init every time
    # addi $v2, $zero, 7 # DOWN
    # addi $v3, $zero, 1 # LEFT

    # update head position according to key pressed 
    beq $t2, $v0, up    
    beq $t2, $v1, right
    beq $t2, $v2, down
    beq $t2, $v3, left
    # no key pressed, continue with current direction
    beq $dir, $v0, up
    beq $dir, $v1, right
    beq $dir, $v2, down
    beq $dir, $v3, left
    
    after_head_update:

    # save head position
    addi $head, $head, 2 # move head to next position
    andi $head, $head, 127 # !! wrap around (Remove the first bit)
    andi $t0, $t0, 31
    andi $t1, $t1, 15
    sw $t0, 0($head)
    sw $t1, 1($head)

    # check if snake head is on snake body
    addi $t2, $tail, 0 # loop index
    j check_collision
    after_check_collision:

    # check if snake head is on food
    beq $t0, $foodX, check_food_collision_y # x position matches, now check y
    
    food_not_eaten:
    
    # update tail position if food not eaten
    addi $tail, $tail, 2 # move tail to next position
    andi $tail, $tail, 127 # !! wrap around 

    food_eaten:

    j game_loop

check_collision:
    lw $v0, 0($t2) # x of body part
    lw $v1, 1($t2) # y of body part
    # no need to mod again here as they are saved as 5 bit and 4 bit
    # andi $v0, $v0, 31
    # andi $v1, $v1, 15
    beq $t0, $v0, check_collision_y # x position matches, now check y
    after_check_collision_x:
    addi $t2, $t2, 2 # next body
    andi $t2, $t2, 127 # !! wrap around
    bneq $t2, $head, check_collision # loop until head
    j after_check_collision

check_collision_y:
    # sw $t1, 14($io) # debug output
    # sw $v1, 14($io) # debug output
    beq $t1, $v1, snake_dead # y position also matches, head body collision    j death_message
    j after_check_collision_x

snake_dead:
    j death_message
    after_death_message:
    j init

check_food_collision_y:
    bneq $t1, $foodY, food_not_eaten # y position does not match, food not eaten
    addi $score, $score, 1 # else y position matches, food eaten
    sw $score, 13($io) # update score
    # get new random food position from RNG
    lw $foodX, 15($io)
    lw $foodY, 15($io) 
    andi $foodX, $foodX, 31 # display x is 5 bit
    andi $foodY, $foodY, 15 # display y is 4 bit
    
    # if score > 60 then game over with win
    subi $t2, $score, 60 # subtract from max score to check if greater than max score
    # sw $t2, 14($io) # debug output 
    # and with 10000000 to check if negative
    andi $t2, $t2, 128
    # sw $t2, 14($io) # debug output to check if negative works
    bneq $t2, $zero, food_eaten

    j win_message
    after_win_message:  
    j init

up:
    beq  $dir, $v2, down   # if current direction is down, then ignore up
    addi $t1, $t1, -1      # y = y - 1
    add  $dir, $zero, $v0  # set direction to up
    j after_head_update    

right:
    beq  $dir, $v3, left  # if current direction is left, then ignore right
    addi $t0, $t0, 1      # x = x + 1
    add  $dir, $zero, $v1 # set direction to right
    j after_head_update

down:
    beq  $dir, $v0, up      # if current direction is up, then ignore down
    addi $t1, $t1, 1        # y = y + 1
    add  $dir, $zero, $v2   # set direction to down
    j after_head_update

left:
    beq  $dir, $v1, right   # if current direction is right, then ignore left
    addi $t0, $t0, -1       # x = x - 1
    add  $dir, $zero, $v3   # set direction to left
    j after_head_update


draw_snake_loop:
    lw $t1, 0($t0) # x of snake body
    lw $t2, 1($t0) # y of snake body
    sw $t1, 0($io) # send x to display
    sw $t2, 1($io) # send y to display
    sw $zero, 2($io) # update display
    beq $t0, $head, after_draw_snake # drew head, stop here
    addi $t0, $t0, 2 # next body
    andi $t0, $t0, 127 # !! wrap around

    j draw_snake_loop 

introduction_message:
    # pre-save SPACE and other most used char in $t1 for later use
    addi $t1, $zero, 32 # SPACE
    addi $t2, $zero, 10 # NEW LINE

    # PRINT "Snake Game" on text screen decimal ascii
    addi $t0, $zero, 83 # S
    sw $t0, 5($io)
    addi $t0, $zero, 110 # n
    sw $t0, 5($io)
    addi $t0, $zero, 97 # a
    sw $t0, 5($io)
    addi $t0, $zero, 107 # k
    sw $t0, 5($io)
    addi $t0, $zero, 101 # e
    sw $t0, 5($io)

    sw $t1, 5($io) # SPACE

    addi $t0, $zero, 71 # G
    sw $t0, 5($io)
    addi $t0, $zero, 97 # a
    sw $t0, 5($io)
    addi $t0, $zero, 109 # m
    sw $t0, 5($io)
    addi $t0, $zero, 101 # e
    sw $t0, 5($io)

    sw $t2, 5($io) # NEW LINE


    # print "Use Poke tool on keyboard to play (use WASD)" on text screen
    addi $t0, $zero, 85 # U
    sw $t0, 5($io)
    addi $t0, $zero, 115 # s
    sw $t0, 5($io)
    addi $t0, $zero, 101 # e
    sw $t0, 5($io)

    sw $t1, 5($io) # SPACE

    addi $t0, $zero, 80 # P
    sw $t0, 5($io)
    addi $t0, $zero, 111 # o
    sw $t0, 5($io)
    addi $t0, $zero, 107 # k
    sw $t0, 5($io)
    addi $t0, $zero, 101 # e
    sw $t0, 5($io)
    
    sw $t1, 5($io) # SPACE

    addi $t0, $zero, 84 # T
    sw $t0, 5($io)
    addi $t0, $zero, 111 # o
    sw $t0, 5($io)
    addi $t0, $zero, 111 # o
    sw $t0, 5($io)
    addi $t0, $zero, 108 # l
    sw $t0, 5($io)

    sw $t1, 5($io) # SPACE

    addi $t0, $zero, 111 # o
    sw $t0, 5($io)
    addi $t0, $zero, 110 # n
    sw $t0, 5($io)

    sw $t1, 5($io) # SPACE

    addi $t0, $zero, 107 # k
    sw $t0, 5($io)
    addi $t0, $zero, 101 # e
    sw $t0, 5($io)
    addi $t0, $zero, 121 # y
    sw $t0, 5($io)
    addi $t0, $zero, 98 # b
    sw $t0, 5($io)
    addi $t0, $zero, 111 # o
    sw $t0, 5($io)
    addi $t0, $zero, 97 # a
    sw $t0, 5($io)
    addi $t0, $zero, 114 # r
    sw $t0, 5($io)
    addi $t0, $zero, 100 # d
    sw $t0, 5($io)

    sw $t2, 5($io) # NEW LINE

    addi $t0, $zero, 116 # t
    sw $t0, 5($io)
    addi $t0, $zero, 111 # o
    sw $t0, 5($io)

    sw $t1, 5($io) # SPACE

    addi $t0, $zero, 112 # p
    sw $t0, 5($io)
    addi $t0, $zero, 108 # l
    sw $t0, 5($io)
    addi $t0, $zero, 97 # a
    sw $t0, 5($io)
    addi $t0, $zero, 121 # y
    sw $t0, 5($io)

    sw $t1, 5($io) # SPACE

    addi $t0, $zero, 40 # (
    sw $t0, 5($io)
    addi $t0, $zero, 117 # u
    sw $t0, 5($io)
    addi $t0, $zero, 115 # s
    sw $t0, 5($io)
    addi $t0, $zero, 101 # e
    sw $t0, 5($io)

    sw $t1, 5($io) # SPACE

    addi $t0, $zero, 87 # W
    sw $t0, 5($io)
    addi $t0, $zero, 65 # A
    sw $t0, 5($io)
    addi $t0, $zero, 83 # S
    sw $t0, 5($io)
    addi $t0, $zero, 68 # D
    sw $t0, 5($io)
    addi $t0, $zero, 41 # )
    sw $t0, 5($io)

    sw $t2, 5($io) # NEW LINE

    j after_introduction_message

death_message:
    # print "You Lost." on text screen
    addi $t0, $zero, 89 # Y
    sw $t0, 5($io)
    addi $t0, $zero, 111 # o
    sw $t0, 5($io)
    addi $t0, $zero, 117 # u
    sw $t0, 5($io)
    addi $t0, $zero, 32 # SPACE
    sw $t0, 5($io)
    addi $t0, $zero, 76 # L
    sw $t0, 5($io)
    addi $t0, $zero, 111 # o
    sw $t0, 5($io)
    addi $t0, $zero, 115 # s
    sw $t0, 5($io)
    addi $t0, $zero, 116 # t
    sw $t0, 5($io)
    addi $t0, $zero, 10 # NEW LINE
    sw $t0, 5($io)
    j after_death_message

win_message:
    # print "You Won." on text screen
    addi $t0, $zero, 89 # Y
    sw $t0, 5($io)
    addi $t0, $zero, 111 # o
    sw $t0, 5($io)
    addi $t0, $zero, 117 # u
    sw $t0, 5($io)
    addi $t0, $zero, 32 # SPACE
    sw $t0, 5($io)
    addi $t0, $zero, 87 # W
    sw $t0, 5($io)
    addi $t0, $zero, 111 # o
    sw $t0, 5($io)
    addi $t0, $zero, 110 # n
    sw $t0, 5($io)
    addi $t0, $zero, 10 # NEW LINE
    sw $t0, 5($io)
    j after_win_message

exit: